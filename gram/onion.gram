
Gram:
    File < :(eol*) Statement_list{prune_tree} :(eol*) eoi

    Statement_list < "" Statement (Separator Statement)*

    # space that can go between statements
    br <- :(eol?)

    Separator <- :(',' / eol+)

    Spacing <- :(' ')*

    
    #Next_statement < eol "Statement"
    #Nl <- '/n' / '/r/n' / '/r'
    
    Statement < 
        / Statement_block 
        / Define_variable 
        / Define_function 
        / Assign 
        / If_statement
        / Loop_statement
        / Expression 

    Assign < Expression br '=' br Expression


## Control flow

    If_expression < 
        'if' br Expression br Value_scope br 'else' br Value_scope

    If_statement < 
        'if' Expression Statement_block (br 'else' br Statement_block)?

    Loop_statement < 
        'loop' br Statement_block

    Each_expression < 
        'each' br (Prototype_argument_list br)?
            Expression br (Value_scope / Statement_block)


## Declarations
    Var < ';'
    Fun < 'fun'
    Define_variable < Var br Value_name br '=' br Expression
    Define_function <
        / Fun 
            br Value_name 
            br Prototype_argument_list 
            br Prototype_argument_list
            br Statement_block
    
    Prototype_argument_list <
        / '(' "" br ')'
        / '(' br Function_parameter (Separator Function_parameter)* br ')'

    Function_parameter < Declare_uninit / Parameter_init / Value_name

    Declare_uninit < Var br Value_name br Expression
    Parameter_init < Var br Value_name br '=' br Expression

    Statement_block < '{' br (Statement_list br)? '}'
    Value_scope < '{' br (Expression br)? '}'

## Value expressions
    Expression < _Ex80

    _Ex80 < 
        / Annotation_of_type(_Ex70)
        / _Ex60
    _Ex70 <
        / Compare(_Ex60)
        / _Ex60
    _Ex60 < 
        #/ Union_dumb(_Ex20)
        #/ Union(_Ex20)
        #/ Struct(_Ex20)
        / Op_and(_Ex20) 
        / Op_or(_Ex20) 
        / Op_xor(_Ex20) 
        / Sum_op(_Ex20)
        / Product_op(_Ex20)
        / _Ex20

    _Ex20 < 
        / Negate(_Ex20)    
        / Invert(_Ex20)    
        / Complement(_Ex20)
        / Mutable(_Ex20) / Immutable(_Ex20)
        / Optional(_Ex20) / Pointer(_Ex20)
        / Slice_type(_Ex20) / Small_array(_Ex20)
        / Error_capture(_Ex20)
        / _Ex10

    _Ex10 < 
        / Function_call
        / Indexing
        / If_expression
        / Grouping_expression
        / Unit_literal
        / Lit_number 
        / Value_name

    Annotation_of_type(Ex) < (Ex br ':' br)+ Ex
    Op_and(Ex)     < Ex (br '&' br Ex)+
    Op_xor(Ex)     < Ex (br '+|' br Ex)+
    Op_or(Ex)      < Struct_field(Ex) (br '|' br Struct_field(Ex))+ 
    Compare(Ex)    < Ex (br (^'<=' / ^'<' / ^'>=' / ^'>' / ^'=' / ^'!=') br Ex)+
    Sum_op(Ex)          < Struct_field(Ex) (br '+' br Struct_field(Ex))+
    Product_op(Ex)      < Struct_field(Ex) (br '*' br Struct_field(Ex))+
    Negate(Ex)          < '-' br Ex
    Invert(Ex)          < '/' br Ex
    Complement(Ex)      < '!' br Ex
    Try                 < 'try' br Function_call
    Function_call < (Value_name / Grouping_expression) Call_arg_list
    Indexing < (Value_name / Grouping_expression) '[' br Expression br ']'

    
    Grouping_expression < '(' br Expression br ')'

    Call_arg_list < 
        '(' br (
            Expression (Separator Expression)* br / ""
        ) ')'


## Type expressions
    #Type <
    #    / Union_dumb 
    #    / Union      
    #    / Struct     
    #    / Mutable() / Immutable()
    #    / Optional() / Pointer()
    #    / Slice_type() / Small_array()
    #    / Error_capture()
    #    / Type_grouping
    #    / Unit_literal
    #    / Type_name

    Unit_literal < "Void"

    # Type_grouping < '(' br Type br ')'


    #Union_dumb(Ex)  < Struct_field(Ex) (br '|' br Struct_field(Ex))+
    #Union(Ex)       < Struct_field(Ex) (br '+' br Struct_field(Ex))+
    #Struct(Ex)      < Struct_field(Ex) (br '*' br Struct_field(Ex))+

    Struct_field(Ex) < Value_name / Declare_uninit / Ex
    #Union_field < Value_name / Declare_uninit / Ex
    #Union_dumb_field < Value_name / Declare_uninit / Ex

    Mutable(Ex)     < 'mut' br Ex
    Immutable(Ex)   < 'imut' br Ex
    Optional(Ex)    < '?' br Ex
    Pointer(Ex)     < '&' br Ex
    Slice_type(Ex)  < '[' br ']' Ex
    Small_array(Ex) < '[' br '$' br Expression br ']' Ex
    Error_capture(Ex) < '!' br Ex
    
    Static_array(Ex) < Ex br '^' br Expression


## Lexing
    Value_name <~ [a-zA-Z] alphanumeric* ('-' alphanumeric+)*
    #Type_name  <~ [A-Z] alphanumeric* ('-' alphanumeric+)*
    Lit_number <~ number_dec / number_hex / number_bin


    alphanumeric <- [a-z0-9]

    number_dec <~ [0-9]+
    number_hex <~ '0x' [0-9A-F_]+
    number_bin <~ '0b' [0-1_]+
